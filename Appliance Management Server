/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author jesutofunmiawodein
 */
import grpc.generated.appliancemanagement.PlayRequest;
import grpc.generated.appliancemanagement.PlayResponse;
import grpc.generated.appliancemanagement.PauseRequest;
import grpc.generated.appliancemanagement.PauseResponse;
import grpc.generated.appliancemanagement.SpeakerApplianceManagementGrpc;
import grpc.generated.appliancemanagement.VolumeRequest;
import grpc.generated.appliancemanagement.VolumeResponse;
import grpc.generated.appliancemanagement.ControlRequest;
import grpc.generated.appliancemanagement.ControlResponse;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

public class applianceManagementServer extends SpeakerApplianceManagementGrpc.SpeakerApplianceManagementImplBase {

  private static final Logger logger = Logger.getLogger(applianceManagementServer.class.getName());
  private Server server;

  private void start() throws IOException {
    int port = 50051;
    server = ServerBuilder.forPort(port)
        .addService(this) //this instance is registered as applianceManagement service.
        .build()
        .start();
    logger.info("Server started, listening on " + port);
    System.out.println("Server started, listening on " + port);
    Runtime.getRuntime().addShutdownHook(new Thread(() -> {
      System.err.println("shutting down gRPC server");
      try {
        applianceManagementServer.this.stop();
      } catch (InterruptedException e) {
        e.printStackTrace(System.err);
      }
      System.err.println("server shut down");
    }));
  }

  private void stop() throws InterruptedException {
    if (server != null) {
      logger.info("Server shutting down");
      server.shutdown().awaitTermination(30, TimeUnit.SECONDS);
    }
  }

  private void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }

  public static void main(String[] args) throws IOException, InterruptedException {
    applianceManagementServer server = new applianceManagementServer();
    server.start();
    server.blockUntilShutdown();
  }

  @Override
  public StreamObserver<PlayRequest> managePlay(
      StreamObserver<PlayResponse> responseObserver) {
    return new StreamObserver<PlayRequest>() {
      @Override
      public void onNext(PlayRequest request) {
        logger.info("Server received PlayRequest: " + request.getMediaURL());
        // Simple echo back with success
        PlayResponse response = PlayResponse.newBuilder().setSuccess(true).build();
        responseObserver.onNext(response);
      }

      @Override
      public void onError(Throwable t) {
        logger.warning("Error in ManagePlay: " + t.getMessage());
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        logger.info("Client finished sending PlayRequests for managePlay.");
        responseObserver.onCompleted();
      }
    };
  }

  @Override
  public StreamObserver<PauseRequest> managePause(
      StreamObserver<PauseResponse> responseObserver) {
    return new StreamObserver<PauseRequest>() {
      @Override
      public void onNext(PauseRequest request) {
        logger.info("Server received PauseRequest: " + request.getMediaURL());
        // Simple echo back with success
        PauseResponse response = PauseResponse.newBuilder().setSuccess(true).build();
        responseObserver.onNext(response);
      }

      @Override
      public void onError(Throwable t) {
        logger.warning("Error in ManagePause: " + t.getMessage());
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        logger.info("Client finished sending PauseRequests for managePause.");
        responseObserver.onCompleted();
      }
    };
  }

  @Override
  public StreamObserver<VolumeRequest> manageSetVolume(
      StreamObserver<VolumeResponse> responseObserver) {
    return new StreamObserver<VolumeRequest>() {
      @Override
      public void onNext(VolumeRequest request) {
        logger.info("Server received VolumeRequest: " + request.getVolume());
        // Simple echo back with success
        VolumeResponse response = VolumeResponse.newBuilder().setSuccess(true).build();
        responseObserver.onNext(response);
      }

      @Override
      public void onError(Throwable t) {
        logger.warning("Error in ManageSetVolume: " + t.getMessage());
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        logger.info("Client finished sending VolumeRequests for manageSetVolume.");
        responseObserver.onCompleted();
      }
    };
  }
}
