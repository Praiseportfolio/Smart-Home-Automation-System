/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */


/**
 *

 */
// Server (EnvironmentalManagementServer.java)

import grpc.generated.environmentalmanagement.EnvironmentalManagementGrpc;
import grpc.generated.environmentalmanagement.SmokeLevelRequest;
import grpc.generated.environmentalmanagement.SmokeLevelResponse;
import grpc.generated.environmentalmanagement.TemperatureRequest;
import grpc.generated.environmentalmanagement.TemperatureResponse;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import io.grpc.Context;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;

public class environmentalManagementServer {

    private static final Logger logger = Logger.getLogger(environmentalManagementServer.class.getName());

    private Server server;

    private void start() throws IOException {
        int port = 50051;
        server = ServerBuilder.forPort(port)
                .addService(new environmentalManagementServiceImpl())
                .build()
                .start();
        logger.info("Server started, listening on " + port);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.err.println("shutting down gRPC server");
            try {
                environmentalManagementServer.this.stop();
            } catch (InterruptedException e) {
                e.printStackTrace(System.err);
            }
            System.err.println("server shut down");
        }));
    }

    private void stop() throws InterruptedException {
        if (server != null) {
            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);
        }
    }

    private void blockUntilShutdown() throws InterruptedException {
        if (server != null) {
            server.awaitTermination();
        }
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        final environmentalManagementServer server = new environmentalManagementServer();
        server.start();
        server.blockUntilShutdown();
    }

    static class environmentalManagementServiceImpl extends EnvironmentalManagementGrpc.EnvironmentalManagementImplBase {

        @Override
        public void getRoomTemperature(TemperatureRequest request, StreamObserver<TemperatureResponse> responseObserver) {
            String roomId = request.getRoomId();
            logger.info("Received GetRoomTemperature request for room: " + roomId);
            
            if (roomId == null || roomId.trim().isEmpty()) {
                responseObserver.onError(new StatusRuntimeException(Status.INVALID_ARGUMENT.withDescription("Room ID cannot be empty.")));
                return;
            }

            if (roomId.equals("ErrorRoom")) {
                responseObserver.onError(new StatusRuntimeException(Status.NOT_FOUND.withDescription("Room not found: " + roomId)));
                return;
            }
            
            double temperature;
            if (roomId.equals("LivingRoom")) {
                temperature = 22.5;
            } else if (roomId.equals("Bedroom")) {
                temperature = 20.0;
            } else {
                temperature = 25.0; // Default temperature
            }
            TemperatureResponse response = TemperatureResponse.newBuilder().setTemperature(temperature).build();
            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }

        @Override
        public void streamSmokeLevel(SmokeLevelRequest request, StreamObserver<SmokeLevelResponse> responseObserver) {
            int smokeSensorId = request.getSmokeSensor();
            logger.info("Received StreamSmokeLevel request for sensor: " + smokeSensorId);
            Random random = new Random();
            try {
                for (int i = 0; i < 10; i++) { 
                    if (Context.current().isCancelled()) {
                        logger.info("Client cancelled the smoke level stream.");
                        return;
                    }
                    if (smokeSensorId == -1) {
                        responseObserver.onError(new StatusRuntimeException(Status.INVALID_ARGUMENT.withDescription("Invalid sensor ID.")));
                        return;
                    }
                    if (i == 5 && smokeSensorId == 99) { // Simulate a server-side error
                        responseObserver.onError(new StatusRuntimeException(Status.INTERNAL.withDescription("Simulated server error.")));
                        return;
                    }
                    int smokeLevel = random.nextInt(100);
                    SmokeLevelResponse response = SmokeLevelResponse.newBuilder().setSmokeLevel(smokeLevel).build();
                    responseObserver.onNext(response);
                    TimeUnit.SECONDS.sleep(1); // Simulate reading interval
                }
            } catch (InterruptedException e) {
                logger.log(Level.WARNING, "Stream interrupted.", e);
            } finally {
                responseObserver.onCompleted();
            }
        }
    }
}
